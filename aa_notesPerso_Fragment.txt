
1 ==> CREATION FRAGMENT.

	1. Cliquer dans "app" pour mettre en surbrillance.
	   NOTA. si autre parties sélectionnée un autre menu contextuel s'ouvre qui ne contient pas 
	   			"fragment"
	1. Barre de menus: File
	2. sous-menu: Fragment (en bas de la liste)
	3. dans pop-up sélectionner "fragment (blank)"
	4. dans boite de dialogue: 
	  a-renseigner le nom de la classe (sans espace de séparation, undersocre à la place)
	    NOTA 1. les majuscules servent de séparateurs de mots.
	    Exemple: BlankDeux
		NOTA 2. Si le nom de la classe contient le mot Fragment, il n'est pas répété dans le nom
		du layout
	  b-un nom pour le layout est automatiquement créé déduit du nom de la classe (en inversant les
	    mots et en mettant fragment en préfixe, exemple: fragment_blank_deux).
		--> dans le nom du layout tout est en minuscules.
				
		NOTA. On peut le modifier du layout à sa guise (même sans le préfixer par fragment).
		
		
	 5 - laisser kotlin et main dans les projets classiques kotlin.
	 6 - cliquer sur finish
	 
 --> Création automatique:
 
     --> A - CLASSE, elle contient:
	 
	  a - 2 paramètres private "param1", "param2"
	  b - override fun onCreate
	  c - override fun onCreateView
	  d - un "companion object"
	  
	  ==> seul "override fun onCreateView" est nécessaire
	  
	  --> B- LAYOUT: contient un text view "Hello blank frament"
	  
2 ==> "Inflater"	le fragment 
	NOTA. Le terme Inflater découle du fait que la place occupée en mémoire par le fragment
	est "gonflée" par celle occupée par les "Views" incluses dans le fragment
	--> (dito pour les "activity")
	  

Deux méthodes pour Inflater.
1 - DrawerItemPrimaryBinding.inflate: utilisation si l'Id du Layout est connu à l'avance
2 - DataBindingUtil.inflate: utilisations si l'Id du Layout est inconnu à l'avance



inflater: LayoutInflater    				--> The LayoutInflater used to inflate the binding layout.
layoutId: int								--> The layout resource ID of the layout to inflate.
parent:	ViewGroup 							--> Optional view to be the parent of the generated
												hierarchy (if attachToParent is true), or else simply
												an object that provides a set of LayoutParams values 
												for root of the returned hierarchy
												(if attachToParent is false.)
attachToParent:	boolean						--> Whether the inflated hierarchy should be attached to 
												the parent parameter. If false, parent is only used 
												to create the correct subclass of LayoutParams for
												the root view in the XML.
bindingComponent: DataBindingComponent		--> Optionnel.The DataBindingComponent to use in the binding
												Par défault	utilise setDefaultComponent
												(DataBindingComponent)
												
												
3 - ==> Insérer le fragment dans une activty ici: "main_activity"

		a - Comme on veut naviguer entre les fragments il faut lui donner comme "name"
		  "packageprojet.nomFragment", ici:
		  "com.example.android.navigation.TitleFragment"
		 
		 b - Insérer dans la partie <LinerLayout> "main_activity.xml":
		   <LinearLayout
		      .................
		 	<fragment
                android:id="@+id/titleFragment"
                android:name="com.example.android.navigation.TitleFragment"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                />
				...........
				</Linearlayout>
		   